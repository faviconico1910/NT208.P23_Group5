fetch('/layout/sidebar.html').then(response => response.text())
.then(html => {
    document.getElementById("sidebar-container").innerHTML = html;
    const toggleButton = document.getElementById("toggle-btn");
    const sidebar = document.getElementById("sidebar");

    toggleButton.addEventListener("click", () => {
        sidebar.classList.toggle("collapsed");
    });
});

document.addEventListener("DOMContentLoaded", async () => {
    try {
        let token = localStorage.getItem("token");
        if (!token) {
            console.error("‚ùå Kh√¥ng c√≥ token!");
            alert("Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            window.location.href = "/login";
            return;
        }

        // Gi·∫£i m√£ token ƒë·ªÉ ki·ªÉm tra vai tr√≤
        const decodedToken = JSON.parse(atob(token.split('.')[1]));
        const userRole = decodedToken.Vai_Tro;  
        const userId = decodedToken.Tai_Khoan;

        console.log("User role:", userRole); // Debug log
        console.log("SessionStorage content:", JSON.stringify(sessionStorage)); // Debug log

        // X√°c ƒë·ªãnh MSSV c·∫ßn xem
        let mssvToView;
        if (userRole === 'SinhVien') {
            mssvToView = userId;
        } else if (userRole === 'GiangVien') {
            // L·∫•y MSSV t·ª´ sessionStorage v·ªõi key ch√≠nh x√°c
            mssvToView = sessionStorage.getItem('currentStudentMSSV');
            
            console.log("MSSV from sessionStorage:", mssvToView); // Debug log
            
            if (!mssvToView) {
                alert("Vui l√≤ng ch·ªçn sinh vi√™n t·ª´ trang h·ªì s∆° tr∆∞·ªõc khi xem l·ªãch h·ªçc");
                window.location.href = "/dssv";
                return;
            }
        } else {
            alert("Vai tr√≤ kh√¥ng h·ª£p l·ªá!");
            window.location.href = "/login";
            return;
        }

        // L·∫•y danh s√°ch h·ªçc k·ª≥
        let hkResponse = await fetch("/xemlichhoc/hocki", {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}`,
                "x-student-mssv": mssvToView
            }
        });


        let hocKiList = await hkResponse.json();
        console.log("üéì Danh s√°ch h·ªçc k·ª≥:", hocKiList);

        const listHocKi = document.getElementById("list-hocki");
        listHocKi.innerHTML = ''; // X√≥a c√°c m·ª•c c≈© tr∆∞·ªõc khi th√™m m·ªõi
        
        hocKiList.forEach(hk => {
            let li = document.createElement("li");
            li.classList.add("dropdown-item");
            li.textContent = "H·ªçc k·ª≥ " + hk.Hoc_Ki;
            li.addEventListener("click", () => {
                loadThoiKhoaBieu(hk.Hoc_Ki);
            });
            listHocKi.appendChild(li);
        });

        // üëâ T·ª± ƒë·ªông load h·ªçc k·ª≥ ƒë·∫ßu ti√™n (l·ªõn nh·∫•t)
        if (hocKiList.length > 0) {
            loadThoiKhoaBieu(hocKiList[0].Hoc_Ki);
        }

        async function loadThoiKhoaBieu(hocki) {
            let url = `/xemlichhoc/api/current/${mssvToView}?hocKi=${hocki}`;
        
            let response = await fetch(url, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                    "x-student-mssv": mssvToView
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            let data = await response.json();
            console.log("üìå D·ªØ li·ªáu t·ª´ API:", data);
            let tableBody = document.getElementById("table-body");
            
            let timetable = {};
            let rowspanTracker = {}; // L∆∞u s·ªë l∆∞·ª£ng ti·∫øt c·∫ßn merge
            let skippedCells = {}; // L∆∞u √¥ n√†o ƒë√£ b·ªã merge ƒë·ªÉ b·ªè qua
            
            for (let i = 1; i <= 12; i++) {
                timetable[i] = { "Th·ª© 2": "", "Th·ª© 3": "", "Th·ª© 4": "", "Th·ª© 5": "", "Th·ª© 6": "", "Th·ª© 7": "" };
            }
            
            data.forEach(row => {
                let { Tiet_Bat_Dau, Tiet_Ket_Thuc, Thu, Ma_Lop_Hoc } = row;
                let thuKey = "Th·ª© " + Thu;
                
                // Ch·ªâ l∆∞u m√¥n h·ªçc v√†o ti·∫øt ƒë·∫ßu ti√™n
                timetable[Tiet_Bat_Dau][thuKey] = Ma_Lop_Hoc;
                rowspanTracker[`${Tiet_Bat_Dau}-${thuKey}`] = Tiet_Ket_Thuc - Tiet_Bat_Dau + 1; // S·ªë ti·∫øt c·∫ßn merge
                
                // ƒê√°nh d·∫•u c√°c ti·∫øt b·ªã merge ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i
                for (let i = Tiet_Bat_Dau + 1; i <= Tiet_Ket_Thuc; i++) {
                    skippedCells[`${i}-${thuKey}`] = true;
                }
            });
            
            tableBody.innerHTML = ''; // X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi th√™m m·ªõi

            for (let i = 1; i <= 12; i++) {
                if (i === 6) {
                    tableBody.innerHTML += `<tr><td colspan='7' style='text-align:center; font-weight:bold;'>Ngh·ªâ Tr∆∞a</td></tr>`;
                }
                let tr = `<tr><td>Ti·∫øt ${i}</td>`;
                
                for (let j = 2; j <= 7; j++) {
                    let thuKey = "Th·ª© " + j;
                    
                    // N·∫øu √¥ n√†y ƒë√£ b·ªã merge th√¨ b·ªè qua
                    if (skippedCells[`${i}-${thuKey}`]) continue;
                    
                    let cellContent = timetable[i][thuKey];
                    
                    if (rowspanTracker[`${i}-${thuKey}`]) {
                        tr += `<td rowspan="${rowspanTracker[`${i}-${thuKey}`]}">${cellContent}</td>`;
                    } else {
                        tr += `<td></td>`; // Ch·ªâ th√™m n·∫øu kh√¥ng c√≥ rowspan
                    }
                }
                
                tr += `</tr>`;
                tableBody.innerHTML += tr;
            }
        }
    } catch (error) {
        console.error("L·ªói t·∫£i d·ªØ li·ªáu:", error);
        alert("C√≥ l·ªói x·∫£y ra khi t·∫£i l·ªãch h·ªçc. Vui l√≤ng th·ª≠ l·∫°i!");
    }
});