const db = require("../config/db.js"); //Import file db.js ƒë·ªÉ s·ª≠ d·ª•ng k·∫øt n·ªëi MySQL.
const jwt = require("jsonwebtoken"); //Import th∆∞ vi·ªán jsonwebtoken ƒë·ªÉ x√°c th·ª±c token.

//T·∫°o m·ªôt h√†m b·∫•t ƒë·ªìng b·ªô (async) ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu l·∫•y danh s√°ch m√¥n h·ªçc ƒë√£ ho√†n th√†nh.
const getCompletedCourses = async (req, res) => {
    try {
        const authHeader = req.headers.authorization;
        console.log("üìå Token nh·∫≠n ƒë∆∞·ª£c t·ª´ client:", authHeader);

        if (!authHeader || !authHeader.startsWith("Bearer ")) { 
            return res.status(403).json({ message: "Kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá!" });
        }
        
        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const tokenUserId = decoded.Tai_Khoan;  // MSSV l·∫•y t·ª´ token
        
        // üî• L·∫•y studentId t·ª´ query parameters n·∫øu c√≥, n·∫øu kh√¥ng th√¨ l·∫•y t·ª´ token
        const studentId = req.query.studentId || tokenUserId;
        console.log("üì© Nh·∫≠n request completedCourses v·ªõi studentId:", studentId);

        // Truy v·∫•n SQL
        const sql = `
        SELECT mh.Ma_Mon_Hoc, mh.Ten_Mon_Hoc, kq.Diem_HP
        FROM KETQUA kq
        JOIN MONHOC mh ON kq.Ma_Mon_Hoc = mh.Ma_Mon_Hoc
        WHERE kq.Ma_Sinh_Vien = ? AND kq.Diem_HP >= 5`;

        db.query(sql, [studentId], (err, result) => {
            if (err) {
                console.error("L·ªói truy v·∫•n SQL:", err);
                return res.status(500).json({ message: "L·ªói server!", error: err });
            }
            if (result.length === 0) {
                return res.status(404).json({ message: "Sinh vi√™n ch∆∞a ho√†n th√†nh m√¥n h·ªçc n√†o!" });
            }
            res.json(result);
        });
    } catch (error) {
        console.error("‚ùå L·ªói x√°c th·ª±c token:", error);
        res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
    }
};


module.exports = { getCompletedCourses };
