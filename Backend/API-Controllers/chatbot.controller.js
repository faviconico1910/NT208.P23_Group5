require("dotenv").config
const axios = require("axios");
const db = require("../config/db.js");
const fs = require("fs");
const path = require("path");
const { GoogleGenerativeAI } = require('@google/generative-ai');

// kh·ªüi t·∫°o
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
// ƒê·ªçc prompt: h∆∞·ªõng d·∫´n + schema
const askPrompt = fs.readFileSync(path.join(__dirname, "../prompts/askPrompt.txt"), "utf-8");

exports.sendMessage = async (req, res) => {
    const userMessage = req.body.message;
    console.log("User message:", userMessage);
    try {

       // G·ªôp sinh SQL v√† di·ªÖn gi·∫£i trong 1 request
        const prompt = `
            B·∫°n l√† chatbot h·ªçc v·ª• UIT. D·ª±a tr√™n c√¢u h·ªèi v√† schema, th·ª±c hi·ªán:
            1. T·∫°o truy v·∫•n SQL MySQL an to√†n.
            2. Di·ªÖn gi·∫£i k·∫øt qu·∫£ trong reply, d√πng {{results}} l√†m placeholder.
            3. Tr·∫£ v·ªÅ JSON: { "sql": "<SQL>", "note": "<Gi·∫£i th√≠ch>", "reply": "ƒê√¢y l√† k·∫øt qu·∫£: {{results}}" }
            L∆∞u √Ω: Reply ch·ªâ ch·ª©a vƒÉn b·∫£n v·ªõi {{results}}, kh√¥ng ch·ª©a b·∫£ng markdown hay JSON th√¥.
            ${askPrompt}
            C√¢u h·ªèi: "${userMessage}"
        `;
        const result = await model.generateContent({
            contents: [{ role: "user", parts: [{ text: prompt }] }],
            generationConfig: { responseMimeType: "application/json" }
        });

        // L·∫•y ph·∫£n h·ªìi t·ª´ Gemini
        const content = result.response.text();
        console.log("Gemini raw response:", content);


    // Parse JSON
        let parsed;
        try {
            parsed = JSON.parse(content);
            if (!parsed.sql || !parsed.note || !parsed.reply) {
                throw new Error("JSON thi·∫øu sql, note, ho·∫∑c reply");
            }
        } catch (err) {
            console.error("L·ªói parse JSON:", err.message, "Raw content:", content);
            return res.json({ reply: "Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI!" });
        }
        
        let rows;
        try {
            [rows] = await db.query(parsed.sql);
            console.log("SQL result:", JSON.stringify(rows, null, 2));
        } catch (dbErr) {
            console.error("L·ªói truy v·∫•n SQL:", dbErr.message, "SQL:", parsed.sql);
            return res.json({ reply: "L·ªói khi truy v·∫•n c∆° s·ªü d·ªØ li·ªáu!" });
        }

        if (rows.length === 0)
            return res.json({ reply: "Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p v·ªõi b·∫°n!" });

        // Di·ªÖn gi·∫£i k·∫øt qu·∫£
        let finalReply;
        if (rows.length === 0) {
            finalReply = "Xin l·ªói, m√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p. B·∫°n mu·ªën h·ªèi g√¨ th√™m kh√¥ng?";
        } else {
            // Thay {{results}} trong reply b·∫±ng k·∫øt qu·∫£ th·ª±c t·∫ø
            const formattedTable = "\n\n" + formatResults(rows).trim() + "\n\n";
            finalReply = parsed.reply.replace(/\s*{{results}}\s*/g, formattedTable);

            // X·ª≠ l√Ω ph·∫ßn ƒë·∫ßu "Ch√†o b·∫°n", "D∆∞·ªõi ƒë√¢y l√†..." l·∫∑p
            finalReply = finalReply
                .replace(/Ch√†o b·∫°n[^\n]*\n?/gi, "") // Xo√° nguy√™n d√≤ng ch√†o b·∫°n
                .replace(/(D∆∞·ªõi ƒë√¢y l√†|Sau ƒë√¢y l√†|M√¨nh ƒë√£ t√¨m th·∫•y).*?(?=\n|{{|üìò)/gi, "") // Lo·∫°i ph·∫ßn m√¥ t·∫£ d∆∞
                .replace(/üìò/g, "") // Lo·∫°i emoji th·ª´a, v√¨ formatResults ƒë√£ th√™m r·ªìi
                .replace(/\n{2,}/g, "\n\n"); // Chu·∫©n ho√° xu·ªëng d√≤ng

            // N·∫øu thi·∫øu ng·∫Øt d√≤ng tr∆∞·ªõc b·∫£ng, √©p th√™m
            if (!finalReply.includes('| H·ªçc k·ª≥ |')) {
                finalReply = "üìò D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ h·ªçc t·∫≠p:\n\n" + finalReply;
            }
        }

        res.json({ reply: finalReply.trim(), debug: parsed.note });

    } catch (err) {
        console.error("API Error:", err.response?.data || err.message);
        res.status(500).json({ reply: "L·ªói API" });
    }
};
// h√†m ƒë·ªãnh d·∫°ng kq
function formatResults(rows) {
    if (!rows.length) return "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.";

    if (rows[0].Ma_Mon_Hoc) {
        let result = "";
        const semesters = [...new Set(rows.map(row => row.Hoc_Ky))].sort();
        semesters.forEach(semester => {
            result += `- **H·ªçc k·ª≥ ${semester}**:\n`;
            const semesterRows = rows.filter(row => row.Hoc_Ky === semester);
            semesterRows.forEach(row => {
                const scores = [
                    row.Diem_QT ? `ƒêi·ªÉm qu√° tr√¨nh ${row.Diem_QT}` : "",
                    row.Diem_GK ? `ƒêi·ªÉm gi·ªØa k·ª≥ ${row.Diem_GK}` : "",
                    row.Diem_TH ? `ƒêi·ªÉm th·ª±c h√†nh ${row.Diem_TH}` : "",
                    row.Diem_CK ? `ƒêi·ªÉm cu·ªëi k·ª≥ ${row.Diem_CK}` : "",
                    row.Diem_HP ? `ƒêi·ªÉm h·ªçc ph·∫ßn ${row.Diem_HP}` : ""
                ].filter(Boolean).join(", ");
                result += `  - ${row.Ma_Mon_Hoc}: ${scores || "Kh√¥ng c√≥ ƒëi·ªÉm"}.\n`;
            });
        });
        return result;
    }

    // X·ª≠ l√Ω c√°c k·∫øt qu·∫£ kh√°c
    return rows.map(row => Object.entries(row).map(([key, val]) => `${key}: ${val ?? "N/A"}`).join(", ")).join("\n");
}