require("dotenv").config
const axios = require("axios");
const db = require("../config/db.js");
const fs = require("fs");
const path = require("path");
const { GoogleGenerativeAI } = require('@google/generative-ai');

// kh·ªüi t·∫°o
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
// ƒê·ªçc prompt: h∆∞·ªõng d·∫´n + schema
const askPrompt = fs.readFileSync(path.join(__dirname, "../prompts/askPrompt.txt"), "utf-8");

exports.sendMessage = async (req, res) => {
    const userMessage = req.body.message;
    console.log("User message:", userMessage);
    try {

       // G·ªôp sinh SQL v√† di·ªÖn gi·∫£i trong 1 request
        const prompt = `
            B·∫°n l√† chatbot h·ªçc v·ª• UIT. D·ª±a tr√™n c√¢u h·ªèi v√† schema, th·ª±c hi·ªán:
            1. T·∫°o truy v·∫•n SQL MySQL an to√†n.
            2. Di·ªÖn gi·∫£i k·∫øt qu·∫£ trong reply, d√πng {{results}} l√†m placeholder.
            3. Tr·∫£ v·ªÅ JSON: { "sql": "<SQL>", "note": "<Gi·∫£i th√≠ch>", "reply": "ƒê√¢y l√† k·∫øt qu·∫£: {{results}}" }
            L∆∞u √Ω: Reply ch·ªâ ch·ª©a vƒÉn b·∫£n v·ªõi {{results}}, kh√¥ng ch·ª©a b·∫£ng markdown hay JSON th√¥.
            ${askPrompt}
            **L∆ØU √ù QUAN TR·ªåNG**: 
            - Khi c√¢u h·ªèi li√™n quan ƒë·∫øn m√¥n h·ªçc (h·ªçc k·ª≥, danh s√°ch m√¥n h·ªçc, v.v.), tr·∫£ v·ªÅ c√°c th√¥ng tin sau:
                - M√£ m√¥n h·ªçc (Ma_Mon_Hoc)
                - T√™n m√¥n h·ªçc (Ten_Mon_Hoc)
                - S·ªë t√≠n ch·ªâ (So_TC)
            C√¢u h·ªèi: "${userMessage}"
        `;
        const result = await model.generateContent({
            contents: [{ role: "user", parts: [{ text: prompt }] }],
            generationConfig: { responseMimeType: "application/json" }
        });

        // L·∫•y ph·∫£n h·ªìi t·ª´ Gemini
        const content = result.response.text();
        console.log("Gemini raw response:", content);


    // Parse JSON
        let parsed;
        try {
            parsed = JSON.parse(content);
            if (!parsed.sql || !parsed.note || !parsed.reply) {
                throw new Error("JSON thi·∫øu sql, note, ho·∫∑c reply");
            }
        } catch (err) {
            console.error("L·ªói parse JSON:", err.message, "Raw content:", content);
            return res.json({ reply: "Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI!" });
        }
        
        let rows;
        try {
            [rows] = await db.query(parsed.sql);
            console.log("SQL result:", JSON.stringify(rows, null, 2));
        } catch (dbErr) {
            console.error("L·ªói truy v·∫•n SQL:", dbErr.message, "SQL:", parsed.sql);
            return res.json({ reply: "L·ªói khi truy v·∫•n c∆° s·ªü d·ªØ li·ªáu!" });
        }

        if (rows.length === 0)
            return res.json({ reply: "Kh√¥ng c√≥ k·∫øt qu·∫£ ph√π h·ª£p v·ªõi b·∫°n!" });

        // Di·ªÖn gi·∫£i k·∫øt qu·∫£
        let finalReply;
        if (rows.length === 0) {
            finalReply = "Xin l·ªói, m√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p. B·∫°n mu·ªën h·ªèi g√¨ th√™m kh√¥ng?";
        } else {
            const formattedTable = formatResults(rows).trim();
            finalReply = parsed.reply
                .replace(/\s*{{results}}\s*/g, `\n${formattedTable}`)
                .replace(/\n{3,}/g, "\n\n"); // Gi·ªõi h·∫°n t·ªëi ƒëa 2 xu·ªëng d√≤ng li√™n ti·∫øp
            
            // Th√™m ph·∫ßn t·ªïng k·∫øt n·∫øu c√≥
            if (parsed.reply.includes("üìä")) {
                finalReply += "\n" + parsed.reply.split("üìä")[1];
            }
            
            // ƒê·∫£m b·∫£o ti√™u ƒë·ªÅ kh√¥ng b·ªã m·∫•t
            if (!finalReply.includes('üìò')) {
                finalReply = "üìò D∆∞·ªõi ƒë√¢y l√† k·∫øt qu·∫£ h·ªçc t·∫≠p:\n\n" + finalReply;
            }
        }

        res.json({ reply: finalReply.trim(), debug: parsed.note });

    } catch (err) {
        console.error("API Error:", err.response?.data || err.message);
        res.status(500).json({ reply: "L·ªói API" });
    }
};
function getGrade(score) {
    if (score == null || score == undefined) return 'N/A';
    if (score >= 8.5) return 'A';
    if (score >= 8.0) return 'B+';
    if (score >= 7.0) return 'B';
    if (score >= 6.5) return 'C+';
    if (score >= 5.5) return 'C';
    if (score >= 5.0) return 'D+';
    return 'F';
}
// h√†m ƒë·ªãnh d·∫°ng kq
function formatResults(rows) {
    if (!rows.length) return "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.";
    if (rows[0].Diem_QT !== undefined && rows[0].Diem_GK !== undefined && rows[0].Diem_HP !== undefined) {
        // L·ªçc c√°c m√¥n h·ªçc duy nh·∫•t
        const uniqueSubjects = [];
        const seenSubjects = new Set();
        
        rows.forEach(row => {
            const subjectKey = `${row.Ma_Mon_Hoc}_${row.Ten_Mon_Hoc}`;
            if (!seenSubjects.has(subjectKey)) {
                seenSubjects.add(subjectKey);
                uniqueSubjects.push(row);
            }
        });

        let result = "";
        let totalScore = 0;
        let passedCount = 0;
        
        uniqueSubjects.forEach(row => {
            const grade = getGrade(row.Diem_HP);
            result += `- ${row.Ma_Mon_Hoc} (${row.Ten_Mon_Hoc}):\n` +
                    `  + ƒêi·ªÉm QT: ${row.Diem_QT || 'N/A'}\n` +
                    `  + ƒêi·ªÉm GK: ${row.Diem_GK || 'N/A'}\n` +
                    `  + ƒêi·ªÉm TH: ${row.Diem_TH || 'N/A'}\n` +
                    `  + ƒêi·ªÉm CK: ${row.Diem_CK || 'N/A'}\n` +
                    `  + ƒêi·ªÉm HP: ${row.Diem_HP || 'N/A'} (${grade})\n\n`;
            
            if (row.Diem_HP && row.Diem_HP >= 5) {
                totalScore += row.Diem_HP;
                passedCount++;
            }
        });
        
        // T√≠nh to√°n t·ªïng k·∫øt
        const average = passedCount > 0 ? (totalScore / passedCount).toFixed(2) : 0;
        const overallGrade = getGrade(average);
        
        // Th√™m ph·∫ßn t·ªïng k·∫øt
        result += `üìå T·ªïng k·∫øt:\n` +
                `- S·ªë m√¥n h·ªçc: ${uniqueSubjects.length}\n` +
                `- ƒêi·ªÉm trung b√¨nh: ${average} (${overallGrade})\n` +
                `- S·ªë m√¥n ƒë·∫°t: ${passedCount}/${uniqueSubjects.length}`;
        
        return result;
    }
    if (rows[0].Ten_Mon_Hoc) {
        // L·ªçc c√°c m√¥n h·ªçc duy nh·∫•t
        const uniqueSubjects = [];
        const seenSubjects = new Set();
        
        rows.forEach(row => {
            if (!seenSubjects.has(row.Ten_Mon_Hoc)) {
                seenSubjects.add(row.Ten_Mon_Hoc);
                uniqueSubjects.push({
                    Ma_Mon_Hoc: row.Ma_Mon_Hoc,
                    Ten_Mon_Hoc: row.Ten_Mon_Hoc,
                    So_TC: row.So_TC
                });
            }
        });

        // T·∫°o chu·ªói k·∫øt qu·∫£ v·ªõi kho·∫£ng c√°ch h·ª£p l√Ω
        let result = "D·ª±a tr√™n th√¥ng tin m√¨nh c√≥, ƒë√¢y l√† danh s√°ch c√°c m√¥n h·ªçc b·∫°n ƒë√£ h·ªçc:\n\n";
        
        uniqueSubjects.forEach(subject => {
            result += `- ${subject.Ma_Mon_Hoc}: ${subject.Ten_Mon_Hoc} (${subject.So_TC} t√≠n ch·ªâ)\n`;
        });
        
        return result;
    }
    
    return rows.map(row => Object.entries(row).map(([key, val]) => `${key}: ${val ?? "N/A"}`).join(", ")).join("\n");
}