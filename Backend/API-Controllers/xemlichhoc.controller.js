const path = require('path');
const jwt = require("jsonwebtoken");
const db = require('../config/db.js');

// Load trang xem l·ªãch h·ªçc
const Xem_lich_hoc_page = (req, res) => {
    res.sendFile(path.join(__dirname, '../../Frontend/Xemlichhoc/xemlichhoc.html'));
};

// API l·∫•y d·ªØ li·ªáu l·ªãch h·ªçc theo h·ªçc k·ª≥
const Xem_lich_hoc = async (req, res) => {
    try {
        console.log("‚úÖ ƒê√£ v√†o route /xemlichhoc/api");

        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return res.status(403).json({ message: "Kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá!" });
        }

        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.Tai_Khoan;

        const hocKi = req.query.hocKi; // <-- l·∫•y h·ªçc k·ª≥ t·ª´ query string
        console.log("üì© Nh·∫≠n request v·ªõi id:", userId, "v√† h·ªçc k·ª≥:", hocKi);

        const sql = `
        SELECT LH.Ma_Lop_Hoc, LH.Thu, LH.Tiet_Bat_Dau, LH.Tiet_Ket_Thuc, MH.Ten_Mon_Hoc, DK.Hoc_Ki
        FROM DANGKY DK
        JOIN LICHHOC LH ON DK.Ma_Lop_Hoc = LH.Ma_Lop_Hoc
        JOIN MONHOC MH ON DK.Ma_Mon_Hoc = MH.Ma_Mon_Hoc
        WHERE DK.Ma_Sinh_Vien = ?
        AND MH.Hoc_Ki = ?
        AND LH.Tiet_Bat_Dau IS NOT NULL
        AND LH.Tiet_Ket_Thuc IS NOT NULL
        ORDER BY LH.Thu ASC, LH.Tiet_Bat_Dau ASC`;

        const [result] = await db.query(sql, [userId, hocKi]);
        console.log("‚úÖ Truy v·∫•n th√†nh c√¥ng:", result);
        return res.json(result);

    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω API:", error);
        return res.status(500).json({ message: "L·ªói x·ª≠ l√Ω ph√≠a server!" });
    }
};

const Xem_lich_hoc_current = async (req, res) => {
    try {
        console.log("‚úÖ ƒê√£ v√†o route /xemlichhoc/api/current");

        const hocKi = req.query.hocKi;
        const mssv = req.params.mssv || req.headers['x-student-mssv'];

        console.log("üì© Nh·∫≠n request v·ªõi mssv:", mssv, "v√† h·ªçc k·ª≥:", hocKi);

        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (req.decodedToken.Vai_Tro === 'SinhVien' && req.decodedToken.Tai_Khoan !== mssv) {
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch h·ªçc c·ªßa sinh vi√™n kh√°c" });
        }

        // N·∫øu l√† gi·∫£ng vi√™n, ki·ªÉm tra xem c√≥ quy·ªÅn xem l·ªãch sinh vi√™n n√†y kh√¥ng
        if (req.decodedToken.role === 'GiangVien') {
            // C√≥ th·ªÉ th√™m logic ki·ªÉm tra gi·∫£ng vi√™n c√≥ d·∫°y sinh vi√™n n√†y kh√¥ng
        }

        const sql = `
        SELECT LH.Ma_Lop_Hoc, LH.Thu, LH.Tiet_Bat_Dau, LH.Tiet_Ket_Thuc, MH.Ten_Mon_Hoc, DK.Hoc_Ki
        FROM DANGKY DK
        JOIN LICHHOC LH ON DK.Ma_Lop_Hoc = LH.Ma_Lop_Hoc
        JOIN MONHOC MH ON DK.Ma_Mon_Hoc = MH.Ma_Mon_Hoc
        WHERE DK.Ma_Sinh_Vien = ?
        AND MH.Hoc_Ki = ?
        AND LH.Tiet_Bat_Dau IS NOT NULL
        AND LH.Tiet_Ket_Thuc IS NOT NULL
        ORDER BY LH.Thu ASC, LH.Tiet_Bat_Dau ASC`;

        const [result] = await db.query(sql, [mssv, hocKi]);
        console.log("‚úÖ Truy v·∫•n th√†nh c√¥ng:", result);
        return res.json(result);

    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω API:", error);
        return res.status(500).json({ message: "L·ªói x·ª≠ l√Ω ph√≠a server!" });
    }
};

// API l·∫•y danh s√°ch h·ªçc k·ª≥
const Lay_danh_sach_hoc_ki = async (req, res) => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader?.startsWith("Bearer ")) {
            return res.status(403).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
        }

        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.Tai_Khoan;
        const userRole = decoded.Vai_Tro; // Gi·∫£ s·ª≠ tr∆∞·ªùng vai tr√≤ l√† VaiTro trong token

        // X√°c ƒë·ªãnh MSSV c·∫ßn truy v·∫•n
        let mssvToQuery;
        if (userRole === 'SinhVien') {
            mssvToQuery = userId;
        } else if (userRole === 'GiangVien') {
            // L·∫•y MSSV t·ª´ header n·∫øu c√≥ (ƒë∆∞·ª£c g·ª≠i t·ª´ frontend)
            mssvToQuery = req.headers['x-student-mssv'];
            
            if (!mssvToQuery) {
                return res.status(400).json({ 
                    message: "Vui l√≤ng ch·ªçn sinh vi√™n t·ª´ trang h·ªì s∆° tr∆∞·ªõc khi xem l·ªãch h·ªçc" 
                });
            }
        } else {
            return res.status(403).json({ message: "Vai tr√≤ kh√¥ng h·ª£p l·ªá!" });
        }

        console.log(`Truy v·∫•n h·ªçc k·ª≥ cho sinh vi√™n: ${mssvToQuery}`);

        const [result] = await db.query(`
            SELECT DISTINCT DK.Hoc_Ki 
            FROM DANGKY DK 
            WHERE DK.Ma_Sinh_Vien = ? 
            ORDER BY DK.Hoc_Ki DESC
        `, [mssvToQuery]);

        console.log(`K·∫øt qu·∫£ truy v·∫•n: ${JSON.stringify(result)}`);

        if (result.length === 0) {
            console.warn(`Kh√¥ng t√¨m th·∫•y h·ªçc k·ª≥ n√†o cho sinh vi√™n ${mssvToQuery}`);
            return res.json([]); // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ l·ªói
        }

        return res.json(result);

    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch h·ªçc k·ª≥:", error);
        return res.status(500).json({ 
            message: "L·ªói server",
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
};

// Th√™m export function m·ªõi
module.exports = { 
  Xem_lich_hoc_page, 
  Xem_lich_hoc, 
  Lay_danh_sach_hoc_ki,
  Xem_lich_hoc_current 
};