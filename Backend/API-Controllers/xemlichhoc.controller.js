const path = require('path');
const jwt = require("jsonwebtoken");
const db = require('../config/db.js');

// Load trang xem l·ªãch h·ªçc
const Xem_lich_hoc_page = (req, res) => {
    res.sendFile(path.join(__dirname, '../../Frontend/Xemlichhoc/xemlichhoc.html'));
};

// API l·∫•y d·ªØ li·ªáu l·ªãch h·ªçc theo h·ªçc k·ª≥
const Xem_lich_hoc = async (req, res) => {
    try {
        console.log("‚úÖ ƒê√£ v√†o route /xemlichhoc/api");

        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return res.status(403).json({ message: "Kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá!" });
        }

        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.Tai_Khoan;

        const hocKi = req.query.hocKi; // <-- l·∫•y h·ªçc k·ª≥ t·ª´ query string
        console.log("üì© Nh·∫≠n request v·ªõi id:", userId, "v√† h·ªçc k·ª≥:", hocKi);

        const sql = `
        SELECT LH.Ma_Lop_Hoc, LH.Thu, LH.Tiet_Bat_Dau, LH.Tiet_Ket_Thuc, MH.Ten_Mon_Hoc, DK.Hoc_Ki
        FROM DANGKY DK
        JOIN LICHHOC LH ON DK.Ma_Lop_Hoc = LH.Ma_Lop_Hoc
        JOIN MONHOC MH ON DK.Ma_Mon_Hoc = MH.Ma_Mon_Hoc
        WHERE DK.Ma_Sinh_Vien = ?
        AND MH.Hoc_Ki = ?
        AND LH.Tiet_Bat_Dau IS NOT NULL
        AND LH.Tiet_Ket_Thuc IS NOT NULL
        ORDER BY LH.Thu ASC, LH.Tiet_Bat_Dau ASC`;

        const [result] = await db.query(sql, [userId, hocKi]);
        console.log("‚úÖ Truy v·∫•n th√†nh c√¥ng:", result);
        return res.json(result);

    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω API:", error);
        return res.status(500).json({ message: "L·ªói x·ª≠ l√Ω ph√≠a server!" });
    }
};

// API l·∫•y danh s√°ch h·ªçc k·ª≥
const Lay_danh_sach_hoc_ki = async (req, res) => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return res.status(403).json({ message: "Kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá!" });
        }

        const token = authHeader.split(" ")[1];
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decoded.Tai_Khoan;

        const sql = `
        SELECT DISTINCT DK.Hoc_Ki
        FROM DANGKY DK
        WHERE DK.Ma_Sinh_Vien = ?
        ORDER BY DK.Hoc_Ki DESC`;

        const [result] = await db.query(sql, [userId]);
        console.log("‚úÖ Truy v·∫•n danh s√°ch h·ªçc k·ª≥ th√†nh c√¥ng:", result);
        return res.json(result);

    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω API:", error);
        return res.status(500).json({ message: "L·ªói x·ª≠ l√Ω ph√≠a server!" });
    }
};

module.exports = { Xem_lich_hoc_page, Xem_lich_hoc, Lay_danh_sach_hoc_ki };
