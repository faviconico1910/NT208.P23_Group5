const express = require("express");
const router = express.Router();
const path = require("path");
const fs = require("fs");
const multer = require("multer");
const jwt = require("jsonwebtoken");

// T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a c√≥
const uploadDir = path.join(__dirname, "../uploads_calendar");
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir);

// C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u file theo MSSV (id user t·ª´ token)
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const userId = req.userId;
        cb(null, `${userId}_scheduled.ics`);
    }
});
const upload = multer({ storage });

/**
 * ‚úÖ Middleware x√°c th·ª±c JWT th·ªß c√¥ng (gi·ªëng v√≠ d·ª• b·∫°n ƒë∆∞a)
 */
function authenticateJWT(req, res, next) {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return res.status(403).json({ message: "Kh√¥ng c√≥ token ho·∫∑c token kh√¥ng h·ª£p l·ªá!" });
    }

    const token = authHeader.split(" ")[1];
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.userId = decoded.Tai_Khoan; // gi·ªëng b·∫°n d√πng `Tai_Khoan`
        next();
    } catch (err) {
        return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }
}

// G·ª≠i file xemlichhoc.html khi truy c·∫≠p /xemlichhoc
router.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../../Frontend/Xemlichhoc/xemlichhoc.html'));
});

// üîπ POST /ics/upload: upload file ics
router.post("/upload", authenticateJWT, upload.single("icsFile"), (req, res) => {
    return res.json({ message: "Upload file .ics th√†nh c√¥ng" });
});

// üîπ GET /ics/me: l·∫•y file ics ƒë√£ upload
router.get("/get", authenticateJWT, (req, res) => {
    const userId = req.userId;
    const filePath = path.join(uploadDir, `${userId}_scheduled.ics`);
    if (fs.existsSync(filePath)) {
        return res.sendFile(filePath);
    } else {
        return res.status(404).json({ message: "Ch∆∞a c√≥ file .ics ƒë∆∞·ª£c upload" });
    }
});

// üîπ DELETE /ics/me: x√≥a file .ics n·∫øu c·∫ßn
router.delete("/delete", authenticateJWT, (req, res) => {
    const userId = req.userId;
    const filePath = path.join(uploadDir, `${userId}_scheduled.ics`);
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        return res.json({ message: "X√≥a file .ics th√†nh c√¥ng" });
    } else {
        return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y file ƒë·ªÉ x√≥a" });
    }
});

module.exports = router;
